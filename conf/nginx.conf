lua_package_path "/etc/nginx/lua/?.lua;;";
lua_shared_dict     log_dict    1M;
    server {
        listen 8080;

        location / {
            default_type text/html;
            # access_by_lua_block {
            #     local ipcidr = require("cidrblock")
            #     local whitelist_ips = {
            #         "127.0.0.1",
            #         "10.10.10.0/24",
            #         "192.168.0.0/16",
            #     }
            #         if not ipcidr.ip_in_cidrs(ngx.var.remote_addr, whitelist_ips) then
            #             return ngx.exit(ngx.HTTP_FORBIDDEN)
            #         end
            # }


            log_by_lua_block {
                local upstream_time = tonumber(ngx.var.upstream_response_time)

                local sum = log_dict:get("upstream_time-sum") or 0
                sum = sum + upstream_time
                log_dict:set("upstream_time-sum", sum)

                local newval, err = log_dict:incr("upstream_time-nb", 1)
                if not newval and err == "not found" then
                    log_dict:add("upstream_time-nb", 0)
                    log_dict:incr("upstream_time-nb", 1)
             end
            }
            content_by_lua_block {
                local logging = require("logging")

                ngx.say("Hello");
            }

            # location /by_file {
            # default_type text/html;
            # content_by_lua_file ./lua/hello_world.lua;
            # }
        }

        # location /google {
        #     resolver 8.8.8.8;
        #     proxy_pass https://www.google.com/;
        # }

             location = /status {
                content_by_lua_block {
                    local log_dict = ngx.shared.log_dict
                    local sum = log_dict:get("upstream_time-sum")
                    local nb = log_dict:get("upstream_time-nb")

                    if nb and sum then
                        ngx.say("average upstream response time: ", sum / nb,
                                " (", nb, " reqs)")
                    else
                        ngx.say("no data yet")
                    end
         }
     }
 }


